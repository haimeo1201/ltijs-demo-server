{"version":3,"sources":["pages/deeplink.js","pages/submitcode.js","App.js","serviceWorker.js","index.js"],"names":["App","useState","language","setLanguage","problem","setProblem","errorMessage","setErrorMessage","getLtik","ltik","URLSearchParams","window","location","search","get","Error","handleSubmit","event","a","preventDefault","ky","post","credentials","json","headers","Authorization","response","ok","status","statusText","text","form","$","append","message","console","error","onSubmit","htmlFor","id","value","onChange","e","target","type","required","className","CodeSubmit","code","setCode","setMessage","loading","setLoading","results","setResults","isCompilationError","setIsCompilationError","score","setScore","submission_id","setSubmission_id","timeout","data","result","judge","tests","log","placeholder","rows","length","onClick","map","test","index","key","verdict","runningTime","exact","path","Boolean","hostname","match","ReactDOM","render","maxSnack","anchorOrigin","vertical","horizontal","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4TAKe,SAASA,IAAO,IAAD,EACIC,mBAAS,OADb,mBACrBC,EADqB,KACXC,EADW,OAEEF,mBAAS,IAFX,mBAErBG,EAFqB,KAEZC,EAFY,OAGYJ,mBAAS,IAHrB,mBAGrBK,EAHqB,KAGPC,EAHO,KAKtBC,EAAU,WACd,IACMC,EADe,IAAIC,gBAAgBC,OAAOC,SAASC,QAC/BC,IAAI,QAC9B,IAAKL,EAAM,MAAM,IAAIM,MAAM,oBAC3B,OAAON,GAGHO,EAAY,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,6DACnBD,EAAME,iBACNZ,EAAgB,IAFG,kBAKMa,IAAGC,KAAK,YAAa,CAC1CC,YAAa,UACbC,KAAM,CAAErB,WAAUE,WAClBoB,QAAS,CACPC,cAAe,UAAYjB,OATd,WAKXkB,EALW,QAcHC,GAdG,sBAeT,IAAIZ,MAAJ,iBAAoBW,EAASE,OAA7B,YAAuCF,EAASG,aAfvC,wBAkBEH,EAASI,OAlBX,QAkBXC,EAlBW,OAmBjBC,IAAE,QAAQC,OAAOF,GAnBA,kDAqBjBxB,EAAgB,qBAAD,OAAsB,KAAM2B,QAA5B,sCACfC,QAAQC,MAAM,SAAd,MAtBiB,0DAAH,sDA0BlB,OACE,6BACE,gDACA,0BAAMC,SAAUrB,GACd,6BACE,2BAAOsB,QAAQ,YAAf,aACA,4BACEC,GAAG,WACHC,MAAOtC,EACPuC,SAAU,SAACC,GAAD,OAAOvC,EAAYuC,EAAEC,OAAOH,SAEtC,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,UAAd,UACA,4BAAQA,MAAM,WAAd,WACA,4BAAQA,MAAM,WAAd,aAGJ,6BACE,2BAAOF,QAAQ,WAAf,YACA,2BACEC,GAAG,UACHK,KAAK,OACLJ,MAAOpC,EACPqC,SAAU,SAACC,GAAD,OAAOrC,EAAWqC,EAAEC,OAAOH,QACrCK,UAAQ,KAGZ,4BAAQD,KAAK,UAAb,WAEDtC,GAAgB,yBAAKwC,UAAU,iBAAiBxC,GA7BnD,KCxCW,SAASyC,IAAc,IAAD,EACT9C,mBAAS,IADA,mBAC1B+C,EAD0B,KACpBC,EADoB,OAEHhD,mBAAS,IAFN,mBAE1BiC,EAF0B,KAEjBgB,EAFiB,OAGHjD,oBAAS,GAHN,mBAG1BkD,EAH0B,KAGjBC,EAHiB,OAIHnD,mBAAS,IAJN,mBAI1BoD,EAJ0B,KAIjBC,EAJiB,OAKmBrD,oBAAS,GAL5B,mBAK1BsD,EAL0B,KAKNC,EALM,OAMPvD,mBAAS,MANF,mBAM1BwD,EAN0B,KAMnBC,EANmB,OAOSzD,mBAAS,MAPlB,mBAO1B0D,EAP0B,KAOXC,EAPW,KAS3BpD,EAAU,WACZ,IACMC,EADe,IAAIC,gBAAgBC,OAAOC,SAASC,QAC/BC,IAAI,QAC9B,IAAKL,EAAM,MAAM,IAAIM,MAAM,oBAC3B,OAAON,GAGLO,EAAY,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,6DACjBD,EAAME,iBACNiC,GAAW,GACXF,EAAW,IACXI,EAAW,IACXE,GAAsB,GACtBE,EAAS,MACTE,EAAiB,MAPA,mBAUUxC,IAAGC,KAAK,SAAU,CACrCC,YAAa,UACbC,KAAM,CAAEyB,QACRxB,QAAS,CAAEC,cAAe,UAAYjB,KACtCqD,QAAS,MAdA,eAUPnC,EAVO,iBAgBMA,EAASH,OAhBf,QAkBO,QAFduC,EAhBO,QAkBJC,QACLP,GAAsB,GACtBN,EAAW,sBAAwBY,EAAKE,MAAS,mBAAqBF,EAAKvB,IAC3EmB,EAAS,KAETJ,EAAWQ,EAAKE,MAAMC,OACtBf,EAAW,gCACXQ,EAASI,EAAKL,OACdG,EAAiBE,EAAKvB,KA1Bb,kDA6BbJ,QAAQ+B,IAAI,SAAZ,MACAhB,EAAW,2EACXM,GAAsB,GA/BT,yBAiCbJ,GAAW,GAjCE,6EAAH,sDA8ClB,OACI,yBAAKN,UAAU,yBACX,gDACA,0BAAMT,SAAUrB,GACZ,8BACIwB,MAAOQ,EACPP,SAAU,SAACC,GAAD,OAAOO,EAAQP,EAAEC,OAAOH,QAClC2B,YAAY,0BACZC,KAAK,KACLtB,UAAU,mBAEZK,IAAYE,EAAQgB,SAAWd,GAC7B,4BAAQX,KAAK,SAASE,UAAU,iBAAhC,WAEDK,IAAYI,GAAsBF,EAAQgB,OAAS,IAClD,4BAAQC,QAxBD,WACnBrB,EAAQ,IACRC,EAAW,IACXI,EAAW,IACXE,GAAsB,GACtBE,EAAS,MACTE,EAAiB,OAkB4Bd,UAAU,mBAA3C,aAKPK,GAAW,yBAAKL,UAAU,WAAf,cACXZ,GAAW,yBAAKY,UAAU,WAAWZ,GAC3B,OAAVuB,GACG,yBAAKX,UAAU,SAAf,gBAAqCW,EAArC,oBAA6DE,IAE/DJ,GAAsBF,EAAQgB,OAAS,GACrC,yBAAKvB,UAAU,WACVO,EAAQkB,KAAI,SAACC,EAAMC,GAAP,OACT,yBAAKC,IAAKD,EAAO3B,UAAU,eACvB,yCAAe2B,EAAQ,GACvB,uCAAaD,EAAKG,SAClB,4CAAkBH,EAAKI,YAAvB,YACA,uCAAaJ,EAAKtC,e,mBCxF/B,SAASlC,IACtB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO6E,OAAK,EAACC,KAAK,KAChB,kBAAC/B,EAAD,OAEF,kBAAC,IAAD,CAAO+B,KAAK,aACV,kBAAC,EAAD,SCNUC,QACW,cAA7BpE,OAAOC,SAASoE,UAEe,UAA7BrE,OAAOC,SAASoE,UAEhBrE,OAAOC,SAASoE,SAASC,MACvB,2D,YCXNC,IAASC,OAAO,kBAAC,IAAD,CACdC,SAAU,EACVC,aAAc,CACZC,SAAU,MACVC,WAAY,WAEC,kBAAC,EAAD,OACIC,SAASC,eAAe,SDqHvC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.99284285.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport '../App.css'; // Import the CSS file\r\nimport ky from 'ky';\r\nimport $ from 'jquery'; // Import jQuery\r\n\r\nexport default function App() {\r\n  const [language, setLanguage] = useState('C++');\r\n  const [problem, setProblem] = useState('');\r\n  const [errorMessage, setErrorMessage] = useState(''); // State for error messages\r\n\r\n  const getLtik = () => {\r\n    const searchParams = new URLSearchParams(window.location.search);\r\n    const ltik = searchParams.get('ltik');\r\n    if (!ltik) throw new Error('Missing LTI key.');\r\n    return ltik;\r\n  };\r\n\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n    setErrorMessage(''); // Reset error message on new submission\r\n\r\n    try {\r\n      const response = await ky.post('/deeplink', {\r\n        credentials: 'include',\r\n        json: { language, problem },\r\n        headers: {\r\n          Authorization: 'Bearer ' + getLtik(),\r\n        },\r\n      });\r\n\r\n      // Check if the response is not ok (4xx or 5xx)\r\n      if (!response.ok) {\r\n        throw new Error(`Error: ${response.status} ${response.statusText}`);\r\n      }\r\n\r\n      const form = await response.text();\r\n      $('body').append(form); // Updated to use vanilla JS instead of jQuery\r\n    } catch (error) {\r\n      setErrorMessage(`Failed to submit: ${error.message}. Please re-enter the problem ID.`); // Display error message\r\n      console.error('Error:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Submit a Problem</h2>\r\n      <form onSubmit={handleSubmit}>\r\n        <div>\r\n          <label htmlFor=\"language\">Language:</label>\r\n          <select\r\n            id=\"language\"\r\n            value={language}\r\n            onChange={(e) => setLanguage(e.target.value)}\r\n          >\r\n            <option value=\"C++\">C++</option>\r\n            <option value=\"Java\">Java</option>\r\n            <option value=\"Pascal\">Pascal</option>\r\n            <option value=\"Python3\">Python3</option>\r\n            <option value=\"Python2\">Python2</option>\r\n          </select>\r\n        </div>\r\n        <div>\r\n          <label htmlFor=\"problem\">Problem:</label>\r\n          <input\r\n            id=\"problem\"\r\n            type=\"text\"\r\n            value={problem}\r\n            onChange={(e) => setProblem(e.target.value)}\r\n            required\r\n          />\r\n        </div>\r\n        <button type=\"submit\">Submit</button>\r\n      </form>\r\n      {errorMessage && <div className=\"error-message\">{errorMessage}</div>} {/* Display error message */}\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from 'react';\r\nimport ky from 'ky'; // Make sure to install ky with `npm install ky`\r\nimport '../App.css'; // Import the CSS file\r\n\r\nexport default function CodeSubmit() {\r\n    const [code, setCode] = useState('');\r\n    const [message, setMessage] = useState('');\r\n    const [loading, setLoading] = useState(false);\r\n    const [results, setResults] = useState([]);\r\n    const [isCompilationError, setIsCompilationError] = useState(false);\r\n    const [score, setScore] = useState(null); // Initialize score as null\r\n    const [submission_id, setSubmission_id] = useState(null); // Initialize submission_id as null\r\n\r\n    const getLtik = () => {\r\n        const searchParams = new URLSearchParams(window.location.search);\r\n        const ltik = searchParams.get('ltik');\r\n        if (!ltik) throw new Error('Missing LTI key.');\r\n        return ltik;\r\n    };\r\n\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n        setLoading(true);\r\n        setMessage('');\r\n        setResults([]);\r\n        setIsCompilationError(false);\r\n        setScore(null); // Reset score to null\r\n        setSubmission_id(null); // Reset submission_id to null\r\n\r\n        try {\r\n            const response = await ky.post('/grade', {\r\n                credentials: 'include',\r\n                json: { code },\r\n                headers: { Authorization: 'Bearer ' + getLtik() },\r\n                timeout: 5000, // Set timeout to 5 seconds\r\n            });\r\n            const data = await response.json();\r\n\r\n            if (data.result === \"CE\") {\r\n                setIsCompilationError(true);\r\n                setMessage('Compilation Error: ' + data.judge +  ' submission_id: ' + data.id);\r\n                setScore(0); // Set score to 0 for compilation error\r\n            } else {\r\n                setResults(data.judge.tests); // Assuming data.judge.tests contains the test results\r\n                setMessage('Code submitted successfully!');\r\n                setScore(data.score); // Set the score from the response\r\n                setSubmission_id(data.id); // Set the submission_id from the response\r\n            }\r\n        } catch (error) {\r\n            console.log('Error:', error);\r\n            setMessage(`You have to wait 1 minute and 30 seconds before submitting another code`);\r\n            setIsCompilationError(true);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const handleResubmit = () => {\r\n        setCode(''); // Reset the code input\r\n        setMessage('');\r\n        setResults([]);\r\n        setIsCompilationError(false);\r\n        setScore(null); // Reset score on resubmit\r\n        setSubmission_id(null); // Reset submission_id on resubmit\r\n    };\r\n\r\n    return (\r\n        <div className=\"code-submit-container\">\r\n            <h1>Submit Your Code</h1>\r\n            <form onSubmit={handleSubmit}>\r\n                <textarea\r\n                    value={code}\r\n                    onChange={(e) => setCode(e.target.value)}\r\n                    placeholder=\"Write your code here...\"\r\n                    rows=\"10\"\r\n                    className=\"code-textarea\"\r\n                />\r\n                {!loading && !results.length && !isCompilationError && (\r\n                    <button type=\"submit\" className=\"submit-button\">Submit</button>\r\n                )}\r\n                {(!loading && (isCompilationError || results.length > 0)) && (\r\n                    <button onClick={handleResubmit} className=\"resubmit-button\">\r\n                        Resubmit\r\n                    </button>\r\n                )}\r\n            </form>\r\n            {loading && <div className=\"loading\">Loading...</div>}\r\n            {message && <div className=\"message\">{message}</div>}\r\n            {score !== null && (\r\n                <div className=\"score\">Total Score: {score}, submission_id: {submission_id}</div>\r\n            )}\r\n            {!isCompilationError && results.length > 0 && (\r\n                <div className=\"results\">\r\n                    {results.map((test, index) => (\r\n                        <div key={index} className=\"test-result\">\r\n                            <h3>Test Case {index + 1}</h3>\r\n                            <p>Verdict: {test.verdict}</p>\r\n                            <p>Running Time: {test.runningTime} seconds</p>\r\n                            <p>Message: {test.message}</p>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react'\r\nimport DeepLink from './pages/deeplink'\r\nimport CodeSubmit from './pages/submitcode'\r\n\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route\r\n} from 'react-router-dom'\r\n\r\nexport default function App () {\r\n  return (\r\n    <Router>\r\n      <Switch>\r\n        <Route exact path='/'>\r\n          <CodeSubmit />\r\n        </Route>\r\n        <Route path='/deeplink'>\r\n          <DeepLink />\r\n        </Route>\r\n      </Switch>\r\n    </Router>\r\n  )\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n)\r\n\r\nexport function register (config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config)\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          )\r\n        })\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nfunction registerValidSW (swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing\r\n        if (installingWorker == null) {\r\n          return\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              )\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration)\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.')\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration)\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error)\r\n    })\r\n}\r\n\r\nfunction checkValidServiceWorker (swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type')\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload()\r\n          })\r\n        })\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      )\r\n    })\r\n}\r\n\r\nexport function unregister () {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister()\r\n    })\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport * as serviceWorker from './serviceWorker'\r\nimport { SnackbarProvider } from 'notistack'\r\n\r\nReactDOM.render(<SnackbarProvider\r\n  maxSnack={3}\r\n  anchorOrigin={{\r\n    vertical: 'top',\r\n    horizontal: 'center'\r\n  }}\r\n                ><App />\r\n</SnackbarProvider>, document.getElementById('root'))\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}